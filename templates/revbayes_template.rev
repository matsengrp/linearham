
seed({{ seed }})

# read in clonal family sequence data
data = readDiscreteCharacterData("{{ fasta_path }}")

# compute some useful constants
num_taxa <- data.ntaxa()
num_branches <- 2 * num_taxa - 3
taxa <- data.taxa()

# initialize the move/monitor counters
mvi = 1
mni = 1


######################
# Substitution Model #
######################

# specify the stationary frequency parameters
pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves[mvi++] = mvBetaSimplex(pi, weight=2.0)
moves[mvi++] = mvDirichletSimplex(pi, weight=1.0)

# specify the exchangeability rate parameters
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[mvi++] = mvBetaSimplex(er, weight=3.0)
moves[mvi++] = mvDirichletSimplex(er, weight=1.5)

Q := fnGTR(er, pi)


#############################
# Among-Site Rate Variation #
#############################

# specify the gamma shape parameter for among-site rate variation
alpha ~ dnExponential(1)
moves[mvi++] = mvScaleBactrian(alpha, weight=2.0)

sr := fnDiscretizeGamma(alpha, alpha, {{ num_rates }}, median=false)


##############
# Tree Model #
##############

out_group = clade("naive")

# specify the unrooted tree topology
topology ~ dnUniformTopology(taxa, outgroup=out_group, rooted=false)
moves[mvi++] = mvNNI(topology, weight=num_taxa/2.0)
moves[mvi++] = mvSPR(topology, weight=num_taxa/10.0)

# specify the branch length parameters
for (i in 1:num_branches) {
    bl[i] ~ dnExponential(100.0)
    moves[mvi++] = mvScaleBactrian(bl[i], weight=1.0)
}

TL := sum(bl)
tree := treeAssembly(topology, bl)


###################
# PhyloCTMC Model #
###################

# specify the sequence evolution model
seq ~ dnPhyloCTMC(tree=tree, Q=Q, siteRates=sr, type="DNA",
                  treatAmbiguousAsGap=true)

seq.clamp(data)


############
# Analysis #
############

mymodel = model(tree)

# create the MCMC monitors
file_printgen = {{ mcmc_thin }}
screen_printgen = 10 * file_printgen
monitors[mni++] = mnModel(filename="{{ output_base }}.log",
                          printgen=file_printgen, separator="\t")
monitors[mni++] = mnFile(pi, er, alpha, tree,
                         filename="{{ output_base }}.trees",
                         printgen=file_printgen, separator="\t",
                         posterior=false)
monitors[mni++] = mnScreen(TL, printgen=screen_printgen)

# run the MCMC sampler
mymcmc = mcmc(mymodel, monitors, moves, nruns=1)
mymcmc.burnin(generations={{ tune_iter }}, tuningInterval={{ tune_thin }})
mymcmc.run(generations={{ mcmc_iter }}, tuningInterval=0)
mymcmc.operatorSummary()

quit()
